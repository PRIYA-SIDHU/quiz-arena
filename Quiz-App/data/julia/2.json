[
  {
    "question": "What will be the result of: [x^2 for x in 1:4]?",
    "options": ["[1, 4, 9, 16]", "(1, 4, 9, 16)", "1:16", "[1 4 9 16]"],
    "correct": "[1, 4, 9, 16]"
  },
  {
    "question": "Which expression correctly applies sin to each element of a vector v using broadcasting?",
    "options": ["sin(v)", "sin{v}", "sin.(v)", "map(sin).v"],
    "correct": "sin.(v)"
  },
  {
    "question": "Given function f(x::Int) = x + 1 and f(x::Float64) = x + 0.5, what is f(2.0)?",
    "options": ["3", "2.5", "Error", "3.5"],
    "correct": "2.5"
  },
  {
    "question": "What will println(\"x = $(2+3)\") print?",
    "options": ["x = 2+3", "x = 23", "x = 5", "Error"],
    "correct": "x = 5"
  },
  {
    "question": "What does the comprehension [i*j for i in 1:2, j in 1:3] produce?",
    "options": ["A 2x3 Matrix", "A 3x2 Matrix", "A Vector of length 6", "A 2x2 Matrix"],
    "correct": "A 2x3 Matrix"
  },
  {
    "question": "Given A = [1, 2, 3]; what is A .+ 10?",
    "options": ["[11, 12, 13]", "[1, 2, 3, 10]", "Error", "[[1,2,3],10]"],
    "correct": "[11, 12, 13]"
  },
  {
    "question": "Which statement correctly iterates keys and values of a dictionary d?",
    "options": [
      "for (k,v) in d; println(k,v); end",
      "for k,v in d; println(k,v); end",
      "for (k=>v) in d; println(k,v); end",
      "for pair in pairs(d); println(pair); end only"
    ],
    "correct": "for (k,v) in d; println(k,v); end"
  },
  {
    "question": "What does collect(1:2:7) return?",
    "options": ["[1, 2, 3, 4, 5, 6, 7]", "[1, 3, 5, 7]", "1:2:7 (unchanged)", "[1, 4, 7]"],
    "correct": "[1, 3, 5, 7]"
  },
  {
    "question": "Which code safely handles an error from parse(Int, \"abc\") and prints \"fail\"?",
    "options": [
      "try parse(Int, \"abc\"); catch; println(\"fail\"); end",
      "try println(parse(Int, \"abc\")) catch println(\"fail\") end",
      "if parse(Int, \"abc\") error println(\"fail\") end",
      "catch(parse(Int, \"abc\")); println(\"fail\")"
    ],
    "correct": "try println(parse(Int, \"abc\")) catch println(\"fail\") end"
  },
  {
    "question": "Which expression reads a whole file into a string variable s?",
    "options": [
      "s = read(\"file.txt\")",
      "s = read(\"file.txt\", String)",
      "s = readline(\"file.txt\")",
      "s = open(\"file.txt\") do io; io; end"
    ],
    "correct": "s = read(\"file.txt\", String)"
  }
]
